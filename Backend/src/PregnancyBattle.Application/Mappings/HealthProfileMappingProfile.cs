using AutoMapper;
using PregnancyBattle.Application.DTOs;
using PregnancyBattle.Domain.Entities;

namespace PregnancyBattle.Application.Mappings
{
    public class HealthProfileMappingProfile : Profile
    {
        public HealthProfileMappingProfile()
        {
            CreateMap<CreateHealthProfileDto, HealthProfile>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Id is generated by DB or service
                .ForMember(dest => dest.UserId, opt => opt.Ignore()) // UserId comes from authenticated user
                .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
                .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
                .ForMember(dest => dest.IsSmoking, opt => opt.MapFrom(src => src.IsSmoking ?? false))
                .ForMember(dest => dest.IsDrinking, opt => opt.MapFrom(src => src.IsDrinking ?? false));

            CreateMap<UpdateHealthProfileDto, HealthProfile>()
                .ForMember(dest => dest.Id, opt => opt.Ignore())
                .ForMember(dest => dest.UserId, opt => opt.Ignore())
                .ForMember(dest => dest.Age, opt => opt.Ignore()) // 年龄通常不在此处更新
                .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
                .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
                // 只映射有值的字段
                .ForMember(dest => dest.Height, opt => opt.Condition(src => src.Height.HasValue))
                .ForMember(dest => dest.PrePregnancyWeight, opt => opt.Condition(src => src.PrePregnancyWeight.HasValue))
                .ForMember(dest => dest.CurrentWeight, opt => opt.Condition(src => src.CurrentWeight.HasValue))
                .ForMember(dest => dest.BloodType, opt => opt.Condition(src => !string.IsNullOrEmpty(src.BloodType)))
                .ForMember(dest => dest.MedicalHistory, opt => opt.Condition(src => src.MedicalHistory != null))
                .ForMember(dest => dest.FamilyHistory, opt => opt.Condition(src => src.FamilyHistory != null))
                .ForMember(dest => dest.AllergiesHistory, opt => opt.Condition(src => src.AllergiesHistory != null))
                .ForMember(dest => dest.ObstetricHistory, opt => opt.Condition(src => src.ObstetricHistory != null))
                .ForMember(dest => dest.IsSmoking, opt => opt.Condition(src => src.IsSmoking.HasValue))
                .ForMember(dest => dest.IsDrinking, opt => opt.Condition(src => src.IsDrinking.HasValue));

            CreateMap<HealthProfile, HealthProfileDto>()
                .ForMember(dest => dest.Bmi, opt => opt.MapFrom(src => src.CalculateBmi()));

            CreateMap<WeightLog, WeightRecordDto>()
                .ForMember(dest => dest.Date, opt => opt.MapFrom(src => src.Date));

            CreateMap<WeightLog, WeightRecordResponseDto>()
                .ForMember(dest => dest.RecordDate, opt => opt.MapFrom(src => src.Date));
        }
    }
}